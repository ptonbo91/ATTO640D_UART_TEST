// File: bt656_gen.v
// Generated by MyHDL 1.0dev
// Date: Wed Nov  8 21:19:38 2017


`timescale 1ns/10ps
//`define ILA_BT656

module bt656_gen_new2 (
    clk,
    reset,
//    fit_to_screen_en,
//    latch_fit_to_screen_en,
    scaling_disable,
    latch_scaling_disable,
    img_up_shift_vert,
    latch_img_up_shift_vert,
    add_border_i_xsize,
    add_border_i_ysize,
    video_i_v,
    video_i_h,
    video_i_dav,
    video_i_data,
    video_i_eoi,
    video_i_xsize,
    video_i_ysize,

    bt656_run,
    bt656_req_v,
    bt656_req_h,
    bt656_field,
    bt656_line_no,
    bt656_req_xsize,
    bt656_req_ysize,

    
    
    PAL_nNTSC,

    clk27,
    rst27,
    bt656_data
);

parameter LIN_BITS = 10;
parameter PIX_BITS = 10;
localparam START_POS_X = 1;//42;
localparam START_POS_Y = 1;//1;//13;
localparam REQ_XSIZE  = 716;//800;
localparam REQ_YSIZE  = 576;//600;
  
// parameter VIDEO_IN_XSIZE = 640;
// parameter VIDEO_IN_YSIZE = 512;
// localparam BLANK_LINES = (576 - VIDEO_IN_YSIZE)/4;
// localparam BLANK_PIXELS = (720 - VIDEO_IN_XSIZE)/2;

(* mark_debug = "true" *)input clk;
(* mark_debug = "true" *)input reset;
//input fit_to_screen_en;
//output reg latch_fit_to_screen_en;

input scaling_disable;
output reg latch_scaling_disable;

input                  [9:0] img_up_shift_vert;
output reg             [9:0] latch_img_up_shift_vert;
output reg    [PIX_BITS-1:0] add_border_i_xsize;
output reg    [LIN_BITS-1:0] add_border_i_ysize;

(* mark_debug = "true" *)input video_i_v;
(* mark_debug = "true" *)input video_i_h;
(* mark_debug = "true" *)input video_i_dav;
(* mark_debug = "true" *)input [15:0] video_i_data;
(* mark_debug = "true" *)input [PIX_BITS-1:0] video_i_xsize;
(* mark_debug = "true" *)input [LIN_BITS-1:0] video_i_ysize;

(* mark_debug = "true" *)input video_i_eoi;
(* mark_debug = "true" *)input PAL_nNTSC;
(* mark_debug = "true" *)input bt656_run;
output [PIX_BITS-1 :0]bt656_req_xsize;
output [LIN_BITS-1 :0]bt656_req_ysize;
(* mark_debug = "true" *)output bt656_req_v;
(* mark_debug = "true" *)output bt656_req_h;
(* mark_debug = "true" *)output bt656_field;
(* mark_debug = "true" *)
(* mark_debug = "true" *)output [LIN_BITS-1:0] bt656_line_no;
(* mark_debug = "true" *)
(* mark_debug = "true" *)input clk27;
(* mark_debug = "true" *)input rst27;
(* mark_debug = "true" *)output [7:0] bt656_data;


localparam FIFO_DEPTH = 12;
localparam FIFO_WIDTH = 16;

(* mark_debug = "true" *)reg [PIX_BITS-1:0] BLANK_PIXELS;
(* mark_debug = "true" *)reg [LIN_BITS-1:0] BLANK_LINES;

reg [PIX_BITS-1:0] VIDEO_IN_XSIZE;
reg [LIN_BITS-1:0] VIDEO_IN_YSIZE;

(* mark_debug = "true" *)reg [7:0] bt656_data;
(* mark_debug = "true" *)reg bt656_req_h;
(* mark_debug = "true" *)reg bt656_req_v;
(* mark_debug = "true" *)reg [LIN_BITS-1:0] bt656_line_no;

(* mark_debug = "true" *)wire [FIFO_DEPTH:0] fifo_usedw;
wire [FIFO_DEPTH:0] fifo_cnt;
(* mark_debug = "true" *)reg fifo_clr;
(* mark_debug = "true" *)wire fifo_clr_rd;
reg fifo_afull;
reg fifo_aempty;
reg fifo_full;
(* mark_debug = "true" *)wire fifo_empty;
reg [0:0] vstate;
(* mark_debug = "true" *)reg [2:0] state;
// reg run;
reg [9:0] lcount;
(* mark_debug = "true" *)wire fifo_wr;
(* mark_debug = "true" *)reg fifo_rd;
wire [FIFO_WIDTH-1:0] fifo_out;
wire [FIFO_WIDTH-1:0] fifo_in;
(* mark_debug = "true" *)reg field;
(* mark_debug = "true" *)reg eav;
(* mark_debug = "true" *)reg chroma;
(* mark_debug = "true" *)reg bt656_sigv;
(* mark_debug = "true" *)reg bt656_sigh;
(* mark_debug = "true" *)reg bt656_sigf;
(* mark_debug = "true" *)reg [10:0] bt656_cnt_pix;
(* mark_debug = "true" *)reg [10:0] bt656_cnt_lin;
(* mark_debug = "true" *)reg PALnNTSC_l;

// assign fifo_clr = 1'd0;

(* mark_debug = "true" *)reg [3:0] bt656_st;
(* mark_debug = "true" *)reg [PIX_BITS-1:0] vxcount;
(* mark_debug = "true" *)reg [LIN_BITS-1:0] vycount;

//assign bt656_req_xsize = video_i_xsize;
//assign bt656_req_ysize = video_i_ysize;
assign bt656_req_xsize = REQ_XSIZE;
assign bt656_req_ysize = REQ_YSIZE;

//assign bt656_field = field;
assign bt656_field = 1'b0;

reg fifo_en;
reg fifo_en_init;
reg start_fifo_wr;


////////////////////////////////////////////////////////////////////////////////////
wire rd_clk = clk27;
wire rd_en = fifo_rd;
wire wr_en = fifo_wr;

wire wr_clk = clk;
wire rst = reset;

wire [FIFO_WIDTH-1:0] din = fifo_in;

wire [FIFO_WIDTH-1:0] dout;
wire [FIFO_DEPTH:0] rd_data_count;
wire rd_rst_busy;

wire [FIFO_DEPTH:0] wr_data_count;
wire wr_rst_busy;

wire empty;
wire full;

////////////////////////////////////////////////////////////////////////////////////



localparam SC_IDLE = 4'd0,
            SC_REQ_V = 4'd1,
            SC_REQ_H = 4'd2,
            SC_WAIT_DAV = 4'd3,
            SC_WAIT_FIFO = 4'd4,
            SC_WAIT = 4'd5;


always @(posedge clk, posedge reset) begin:bt656_req
    if(reset==1) begin 
        bt656_st <= SC_IDLE;
        bt656_req_v <= 1'b0;
        bt656_req_h <= 1'b0;
        bt656_line_no <= 'd0;
        vycount <= 'd0;
        vxcount <= 'd0;
        field <= 1'b1;
        fifo_clr<=1'b0;
        fifo_en_init <= 0;
//        start_fifo_wr <=1'b0;
        start_fifo_wr <=1'b1;
//        latch_fit_to_screen_en <= 1'b0;
        latch_scaling_disable   <= 1'b1;//1'b0;
        add_border_i_xsize      <= 640;//800;
        add_border_i_ysize      <= 480;//600;
        latch_img_up_shift_vert <= 0;
    end
    else begin 
        bt656_req_v <= 1'b0;
        bt656_req_h <= 1'b0;
        fifo_clr<=1'b0;
        case (bt656_st)
            SC_IDLE: begin 
                if(wr_rst_busy==1'b0 && bt656_run) begin 
                    fifo_clr<=1'b1;
                    bt656_st  <= SC_REQ_V;
//                    latch_fit_to_screen_en <= fit_to_screen_en;
                    latch_scaling_disable <= scaling_disable;
                    latch_img_up_shift_vert <= img_up_shift_vert;
                    if(scaling_disable)begin
                        add_border_i_xsize     <= 640;
                        add_border_i_ysize     <= 480;  
                    end   
                    else begin
                        add_border_i_xsize     <= 800;
                        add_border_i_ysize     <= 600;
                    end                     
                    
                    
                    bt656_line_no <= 'd0;
                    if(field) begin 
                        fifo_en_init <= 0;
                    end
                    else  begin
                       fifo_en_init <= 1;
                    end 
                    field <= !field;
                end
            end
            SC_REQ_V: begin 
                bt656_req_v <= 1'b1;
                bt656_st <= SC_WAIT;
            end
            SC_WAIT:begin 
                bt656_st <= SC_REQ_H;
            end
            SC_REQ_H:begin 
                bt656_req_h <= 1'b1;
                vycount <= vycount + 1;
                bt656_st <= SC_WAIT_DAV;
            end
            SC_WAIT_DAV: begin 
                if(video_i_dav) begin
                    vxcount <= vxcount + 1;
                end
//                if(vxcount==video_i_xsize-1) begin
//                if(vxcount==799) begin
                if(vxcount== REQ_XSIZE) begin
                    vxcount <= 'd0; 
                    bt656_st <= SC_WAIT_FIFO;
                end
                
//                if((vxcount>41 && vxcount < 758) && (vycount > 12 && vycount < 589))begin
//                if((vxcount > START_POS_X-1 && vxcount < START_POS_X+716 ) && (vycount > START_POS_Y-1 && vycount < START_POS_Y + 576))begin
//                    start_fifo_wr <= 1'b1;
//                end    
//                else begin
//                    start_fifo_wr <= 1'b0; 
//                end
            end
            SC_WAIT_FIFO:begin
                if(vycount[0]==1) begin 
                    bt656_line_no <= bt656_line_no +1;
                    bt656_st <= SC_REQ_H;
                end 
                else if(fifo_usedw<(video_i_xsize<<1)) begin 
//                    if(vycount==VIDEO_IN_YSIZE) begin 
//                    if(vycount==600) begin
                    if(vycount==REQ_YSIZE) begin  
                        vycount <= 'd0;
                        bt656_st <= SC_REQ_V;
//                        latch_fit_to_screen_en <= fit_to_screen_en;
                        latch_scaling_disable <= scaling_disable;
                        latch_img_up_shift_vert <= img_up_shift_vert;
                        if(scaling_disable)begin
                            add_border_i_xsize     <= 640;
                            add_border_i_ysize     <= 480;  
                        end   
                        else begin
                            add_border_i_xsize     <= 800;
                            add_border_i_ysize     <= 600;
                        end                              
                        if(field) begin 
                            fifo_en_init <= 0;
                        end
                        else  begin
                           fifo_en_init <= 1;
                        end 
                        field <= !field;
                        bt656_line_no <= 'd0;   
                    end else begin 
                        bt656_line_no <= bt656_line_no +1;
                        bt656_st <= SC_REQ_H;
                    end
                end
            end
            default : bt656_st <= SC_IDLE;
        endcase
    end
end


always @(posedge clk27, posedge rst27) begin: BT656_GEN_BT6565_GEN_FSM
    reg [3-1:0] b;
    if (rst27 == 1) begin
        chroma <= 1;
        bt656_sigh <= 0;
        bt656_data <= 0;
        bt656_cnt_lin <= 0;
        fifo_rd <= 0;
        state <= 3'b000;
        bt656_cnt_pix <= ((280 / 2) - 1);
        bt656_sigv <= 1;
        PALnNTSC_l <= 1;
        eav <= 1;
        bt656_sigf <= 1;
        VIDEO_IN_XSIZE <= 0;
        VIDEO_IN_YSIZE <= 0;
        BLANK_PIXELS <= 0;
        BLANK_LINES <= 0;
    end
    else begin
        b = {bt656_sigf, bt656_sigv, bt656_sigh};
        if ((state == 3'b000)) begin
            if (bt656_run) begin
                state <= 3'b001;
                VIDEO_IN_XSIZE <= video_i_xsize;
                VIDEO_IN_YSIZE <= video_i_ysize;
                PALnNTSC_l     <= PAL_nNTSC;
                if(PAL_nNTSC) begin 
                    BLANK_PIXELS <= (720 - video_i_xsize)/2;
                    BLANK_LINES  <= (576 - video_i_ysize)/4;    
                end else begin 
                    BLANK_PIXELS <= (720 - video_i_xsize)/2;
                    BLANK_LINES  <= (486 - video_i_ysize)/4; 
//                    BLANK_LINES  <= 0;//(486 - video_i_ysize)/4;    
                end
            end
        end
        else begin
            case (state)
                3'b011: begin
                    bt656_data <= 255;
                    state <= 3'b100;
//                    PALnNTSC_l <= PAL_nNTSC;
                    if(PALnNTSC_l) begin 
                        BLANK_LINES <= (576 - video_i_ysize)/4;    
                    end 
                    else begin 
                        BLANK_LINES <=(486 - video_i_ysize)/4;                                
                    end
                end
                3'b100: begin
                    bt656_data <= 0;
                    state <= 3'b101;
                end
                3'b101: begin
                    bt656_data <= 0;
                    state <= 3'b110;
                end
                3'b110: begin
                    bt656_data[7] <= 1'b1;
                    bt656_data[6] <= bt656_sigf;
                    bt656_data[5] <= bt656_sigv;
                    bt656_data[4] <= bt656_sigh;
                    case (b)
                        'h0: begin
                            bt656_data[4-1:0] <= 0;
                        end
                        'h1: begin
                            bt656_data[4-1:0] <= 13;
                        end
                        'h2: begin
                            bt656_data[4-1:0] <= 11;
                        end
                        'h3: begin
                            bt656_data[4-1:0] <= 6;
                        end
                        'h4: begin
                            bt656_data[4-1:0] <= 7;
                        end
                        'h5: begin
                            bt656_data[4-1:0] <= 10;
                        end
                        'h6: begin
                            bt656_data[4-1:0] <= 12;
                        end
                        default: begin
                            bt656_data[4-1:0] <= 1;
                        end
                    endcase
                    if (eav) begin
                        eav <= 0;
                        bt656_sigh <= 0;
                        state <= 3'b001;
                        if (PALnNTSC_l) begin
                            bt656_cnt_pix <= ((280 / 2) - 1);
                        end
                        else begin
                            bt656_cnt_pix <= ((268 / 2) - 1);
                        end
                    end
                    else begin
                        eav <= 1;
                        if (bt656_sigv) begin
                            if (PALnNTSC_l) begin
                                bt656_cnt_pix <= ((1440 / 2) - 1);
                            end
                            else begin
                                bt656_cnt_pix <= ((1440 / 2) - 1);
                            end
                            state <= 3'b001;
                        end
                        else begin
                            bt656_cnt_pix <= 0;
                            state <= 3'b111;
                            chroma <= 1'b1;
                        end
                    end
                end
                3'b001: begin
                    bt656_data <= 128;
                    state <= 3'b010;
                end
                3'b010: begin
                    bt656_data <= 16;
                    if ((bt656_cnt_pix == 0)) begin
                        state <= 3'b011;
                        if (eav) begin
                            bt656_sigh <= 1;
                            bt656_cnt_lin <= (bt656_cnt_lin + 1);
                            if (PALnNTSC_l) begin
                                if ((bt656_cnt_lin == 1)) begin
                                    bt656_sigf <= (!bt656_sigf);
                                end
                                if (((($signed({1'b0, bt656_cnt_lin}) == (24 - 1)) && (bt656_sigf == 0)) || ((bt656_cnt_lin == 24) && (bt656_sigf == 1)))) begin
                                    bt656_cnt_lin <= 0;
                                    bt656_sigv <= 0;
                                end
                            end
                            else begin
//                                if ((bt656_cnt_lin == 4)) begin
                                if ((bt656_cnt_lin == 2)) begin
                                    bt656_sigf <= (!bt656_sigf);
                                end
                                if (((($signed({1'b0, bt656_cnt_lin}) == (19 - 1)) && (bt656_sigf == 0)) || ((bt656_cnt_lin == 19) && (bt656_sigf == 1)))) begin
//                                if (((($signed({1'b0, bt656_cnt_lin}) == (22 - 1)) && (bt656_sigf == 0)) || ((bt656_cnt_lin == 22) && (bt656_sigf == 1)))) begin
                                    bt656_cnt_lin <= 0;
                                    bt656_sigv <= 0;
                                end
                            end
                        end
                    end
                    else begin
                        bt656_cnt_pix <= (bt656_cnt_pix - 1);
                        state <= 3'b001;
                    end
                end
                3'b111: begin
                    if (chroma) begin
                        // fifo_rd <= 1'b0;
                        if (((bt656_cnt_lin < BLANK_LINES) || (bt656_cnt_lin >= ((VIDEO_IN_YSIZE >>> 1) + BLANK_LINES)))) begin
                            bt656_data <= 128;
                        end
                        else begin
                            if (((bt656_cnt_pix < (BLANK_PIXELS << 1)) || (bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)))) begin
                                bt656_data <= 128;
                                if((bt656_cnt_pix >= (BLANK_PIXELS << 1)-2) && (bt656_cnt_pix < ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)) ) begin
                                    fifo_rd <= 1'b1;
                                end    
                            end
                            else begin 
                                fifo_rd <= 1'b1;
                                if(bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)-2) begin
                                    fifo_rd <= 1'b0;
                                end
                                bt656_data <= fifo_out[7:0];
                            end
                        end
                    end
                    else begin
                        fifo_rd <= 1'b0;
                        if (((bt656_cnt_lin < BLANK_LINES) || (bt656_cnt_lin >= ((VIDEO_IN_YSIZE >>> 1) + BLANK_LINES)))) begin
                            bt656_data <= 16;
                        end
                        else begin
                            if (((bt656_cnt_pix < (BLANK_PIXELS << 1)) || (bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)))) begin
                                bt656_data <= 16;
                                // if((bt656_cnt_pix >= (BLANK_PIXELS << 1)-1) && (bt656_cnt_pix < ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1))) begin
                                //     fifo_rd <= 1'b1;
                                // end    
                            end
                            else begin
                                // fifo_rd <= 1'b1;
                                // if(bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)-1) begin
                                //     fifo_rd <= 1'b0;
                                // end
                                bt656_data <= fifo_out[15:8];
                            end
                        end
                    end
                    chroma <= (!chroma);
                    bt656_cnt_pix <= (bt656_cnt_pix + 1);
                    if (((($signed({1'b0, bt656_cnt_pix}) == (1440 - 1)) && (PALnNTSC_l == 1)) || (($signed({1'b0, bt656_cnt_pix}) == (1440 - 1)) && (PALnNTSC_l == 0)))) begin
                        state <= 3'b011;
                        fifo_rd <= 1'b0;
                        bt656_cnt_lin <= (bt656_cnt_lin + 1);
                        bt656_sigh <= 1;
                        bt656_cnt_pix <= 0;
                        if (((($signed({1'b0, bt656_cnt_lin}) == (288 - 1)) && (PALnNTSC_l  == 1)) || (($signed({1'b0, bt656_cnt_lin}) == (243 - 1)) && (PALnNTSC_l == 0)))) begin
//                        if (((($signed({1'b0, bt656_cnt_lin}) == (288 - 1)) && (PALnNTSC_l  == 1)) || (($signed({1'b0, bt656_cnt_lin}) == (240 - 1)) && (PALnNTSC_l == 0)))) begin
                            VIDEO_IN_XSIZE <= video_i_xsize;
                            VIDEO_IN_YSIZE <= video_i_ysize;
                            BLANK_PIXELS <= (720 - video_i_xsize)/2;
                            if(bt656_sigf == 1'b1)begin
                                PALnNTSC_l   <= PAL_nNTSC;
                            end
//                            if(PALnNTSC_l) begin 
//                            if(PAL_nNTSC) begin 
//                                BLANK_LINES <= (576 - video_i_ysize)/4;    
//                            end 
//                            else begin 
//                                BLANK_LINES <=(486 - video_i_ysize)/4;    
////                                BLANK_LINES <= 0;//(486 - video_i_ysize)/4;       
                                 
//                            end
                            bt656_cnt_lin <= 0;
                            bt656_sigv <= 1;
                        end
                    end
                end
            endcase
        end
    end
end

// FIFO_DUAL_CLK #(
//     .FIFO_DEPTH(FIFO_DEPTH),
//     .FIFO_WIDTH(FIFO_WIDTH)
//     ) fifo_inst (
//     .CLK_WR(clk),         
//     .RST_WR(reset),         
//     .CLR_WR(fifo_clr),         
//     .WRREQ(fifo_wr),          
//     .WRDATA(fifo_in),         
//     .CLK_RD(clk27),         
//     .RST_RD(reset),         
//     .CLR_RD(fifo_clr_rd),         
//     .RDREQ(fifo_rd),          
//     .RDDATA(fifo_out),         
//     .EMPTY_RD(fifo_empty),       
//     .FIFO_CNT_RD(fifo_cnt)    
//     );
// META_HARDEN meta_harden_inst1(
//     .CLK_DST         (clk27),
//     .RST_DST         (reset),
//     .SIGNAL_SRC      (fifo_clr),
//     .SIGNAL_DST      (fifo_clr_rd)
//     );
// META_HARDEN_VECTOR #(.bit_width(FIFO_DEPTH)) meta_harden_inst2(
//     .CLK_DST         (clk),
//     .RST_DST         (reset),
//     .SIGNAL_SRC      (fifo_cnt),
//     .SIGNAL_DST      (fifo_usedw)
//     );

assign fifo_usedw = wr_data_count;
assign fifo_empty = empty;
assign fifo_out = dout;

xpm_fifo_async #(
      .CDC_SYNC_STAGES(2),       // DECIMAL
      .DOUT_RESET_VALUE("0"),    // String
      .ECC_MODE("no_ecc"),       // String
      .FIFO_MEMORY_TYPE("auto"), // String
      .FIFO_READ_LATENCY(1),     // DECIMAL
      .FIFO_WRITE_DEPTH(2**FIFO_DEPTH),   // DECIMAL
      .FULL_RESET_VALUE(0),      // DECIMAL
      .PROG_EMPTY_THRESH(10),    // DECIMAL
      .PROG_FULL_THRESH(10),     // DECIMAL
      .RD_DATA_COUNT_WIDTH(FIFO_DEPTH+1),   // DECIMAL
      .READ_DATA_WIDTH(FIFO_WIDTH),      // DECIMAL
      .READ_MODE("std"),         // String
      .RELATED_CLOCKS(0),        // DECIMAL
      .USE_ADV_FEATURES("0707"), // String
      .WAKEUP_TIME(0),           // DECIMAL
      .WRITE_DATA_WIDTH(FIFO_WIDTH),     // DECIMAL
      .WR_DATA_COUNT_WIDTH(FIFO_DEPTH+1)    // DECIMAL
   )
   xpm_fifo_async_inst (
      .almost_empty(),
      .almost_full(),
      .data_valid(),
      .dbiterr(),
      .dout(dout),
      .empty(empty),
      .full(full),
      .overflow(),
      .prog_empty(),
      .prog_full(),
      .rd_data_count(rd_data_count),
      .rd_rst_busy(rd_rst_busy),
      .sbiterr(),
      .underflow(),
      .wr_ack(),
      .wr_data_count(wr_data_count),
      .wr_rst_busy(wr_rst_busy),
      .din(din),
      .injectdbiterr(1'b0),
      .injectsbiterr(1'b0),
      .rd_clk(rd_clk),
      .rd_en(rd_en),
      .rst(rst),
      .sleep(1'b0),
      .wr_clk(wr_clk),
      .wr_en(wr_en)
   );

always @(posedge clk or posedge reset) begin : proc_fifo_en
    if(reset) begin
        fifo_en <= 0;
    end else begin
        if(video_i_v) begin 
            fifo_en <= fifo_en_init;
        end
        if(video_i_h) begin 
            fifo_en <= !fifo_en;
        end
    end
end

assign fifo_wr = video_i_dav & fifo_en & start_fifo_wr;
assign fifo_in = video_i_data;


`ifdef ILA_BT656
wire [127 : 0] probe_bt656;

assign probe_bt656 = {     4'd0,
//                          video_i_ysize,
                          field,      
                          eav,        
                          chroma,     
                          bt656_sigv, 
                          bt656_sigh, 
                          bt656_sigf,                           
                           state,
                           bt656_st,           
                           video_i_v,          
                           video_i_h,          
                           video_i_dav,        
                           video_i_data,       
                           video_i_eoi,        
//                           video_i_xsize,      
                                                    
//                           bt656_run,    
                           PALnNTSC_l,      
                           bt656_req_v,        
                           bt656_req_h,        
                           bt656_field,        
                           bt656_line_no,      
//                           bt656_req_xsize,    
//                           bt656_req_ysize,                                                                           
//                           clk27,   
                           PAL_nNTSC,
                                      
                           bt656_data ,
                           vxcount,
                           vycount,
                           fifo_rd,
                           fifo_clr,
                           fifo_wr,
                           fifo_empty,
                           fifo_usedw,
                           fifo_clr_rd,
                           BLANK_LINES,
                           bt656_cnt_lin,
                           bt656_cnt_pix
                           
                           
                           
                                                              
                           }; 

ila_0 i_ila_bt656
(
	.CLK(clk),
	.PROBE0(probe_bt656)
);

`endif



endmodule

//// File: bt656_gen.v
//// Generated by MyHDL 1.0dev
//// Date: Wed Nov  8 21:19:38 2017


//`timescale 1ns/10ps

//module bt656_gen_new2 (
//    clk,
//    reset,
//    video_i_v,
//    video_i_h,
//    video_i_dav,
//    video_i_data,
//    video_i_eoi,
//    video_i_xsize,
//    video_i_ysize,

//    bt656_run,
//    bt656_req_v,
//    bt656_req_h,
//    bt656_field,
//    bt656_line_no,
//    bt656_req_xsize,
//    bt656_req_ysize,

//    PAL_nNTSC,

//    clk27,
//    bt656_data
//);

//parameter LIN_BITS = 10;
//parameter PIX_BITS = 10;
//// parameter VIDEO_IN_XSIZE = 640;
//// parameter VIDEO_IN_YSIZE = 512;
//// localparam BLANK_LINES = (576 - VIDEO_IN_YSIZE)/4;
//// localparam BLANK_PIXELS = (720 - VIDEO_IN_XSIZE)/2;

//input clk;
//input reset;
//input video_i_v;
//input video_i_h;
//input video_i_dav;
//input [15:0] video_i_data;
//input [PIX_BITS-1:0] video_i_xsize;
//input [LIN_BITS-1:0] video_i_ysize;

//input video_i_eoi;
//input PAL_nNTSC;
//input bt656_run;
//output [PIX_BITS-1 :0]bt656_req_xsize;
//output [LIN_BITS-1 :0]bt656_req_ysize;
//output bt656_req_v;
//output bt656_req_h;
//output bt656_field;

//output [LIN_BITS-1:0] bt656_line_no;

//input clk27;
//output [7:0] bt656_data;

////(* mark_debug = "true" *)
//localparam FIFO_DEPTH = 11;
//localparam FIFO_WIDTH = 16;

//reg [PIX_BITS-1:0] BLANK_PIXELS;
//reg [LIN_BITS-1:0] BLANK_LINES;

//reg [PIX_BITS-1:0] VIDEO_IN_XSIZE;
//reg [LIN_BITS-1:0] VIDEO_IN_YSIZE;

//reg [7:0] bt656_data;
//reg bt656_req_h;
//reg bt656_req_v;
//reg [LIN_BITS-1:0] bt656_line_no;

//wire [FIFO_DEPTH-1:0] fifo_usedw;
//wire [FIFO_DEPTH-1:0] fifo_cnt;
//reg fifo_clr;
//wire fifo_clr_rd;
//reg fifo_afull;
//reg fifo_aempty;
//reg fifo_full;
//wire fifo_empty;
//reg [0:0] vstate;
//reg [2:0] state;
//// reg run;
//reg [9:0] lcount;
//wire fifo_wr;
//reg fifo_rd;
//wire [FIFO_WIDTH-1:0] fifo_out;
//wire [FIFO_WIDTH-1:0] fifo_in;
//reg field;
//reg eav;
//reg chroma;
//reg bt656_sigv;
//reg bt656_sigh;
//reg bt656_sigf;
//reg [10:0] bt656_cnt_pix;
//reg [10:0] bt656_cnt_lin;
//reg PALnNTSC_l;

//// assign fifo_clr = 1'd0;

//reg [3:0] bt656_st;
//reg [PIX_BITS-1:0] vxcount;
//reg [LIN_BITS-1:0] vycount;

//assign bt656_req_xsize = video_i_xsize;
//assign bt656_req_ysize = video_i_ysize;


////assign bt656_field = field;
//assign bt656_field = 0;

//localparam SC_IDLE = 4'd0,
//            SC_REQ_V = 4'd1,
//            SC_REQ_H = 4'd2,
//            SC_WAIT_DAV = 4'd3,
//            SC_WAIT_FIFO = 4'd4,
//            SC_WAIT = 4'd5;


//always @(posedge clk, posedge reset) begin:bt656_req
//    if(reset==1) begin 
//        bt656_st <= SC_IDLE;
//        bt656_req_v <= 1'b0;
//        bt656_req_h <= 1'b0;
//        bt656_line_no <= 'd0;
//        vycount <= 'd0;
//        vxcount <= 'd0;
//        field <= 1'b1;
//        fifo_clr<=1'b0;
//    end
//    else begin 
//        bt656_req_v <= 1'b0;
//        bt656_req_h <= 1'b0;
//        fifo_clr<=1'b0;
//        case (bt656_st)
//            SC_IDLE: begin 
//                if((fifo_usedw==0) && bt656_run) begin 
//                    fifo_clr<=1'b1;
//                    bt656_st  <= SC_REQ_V;
//                    if(field) begin 
//                        bt656_line_no <= 'd0;
//                    end
//                    else  begin
//                       bt656_line_no <= 'd1; 
//                    end 
//                    field <= !field;
//                end
//            end
//            SC_REQ_V: begin 
//                if(field==1'b0)begin
//                    bt656_req_v <= 1'b1;
//                end
//                else begin
//                    bt656_req_v <= 1'b0;
//                end
////                bt656_req_v <= 1'b1;
//                bt656_st <= SC_WAIT;
//            end
//            SC_WAIT:begin 
//                bt656_st <= SC_REQ_H;
//            end
//            SC_REQ_H:begin 
//                bt656_req_h <= 1'b1;
//                vycount <= vycount + 1;
//                bt656_st <= SC_WAIT_DAV;
//            end
//            SC_WAIT_DAV: begin 
//                if(video_i_dav) begin
//                    vxcount <= vxcount + 1;
//                end
//                if(vxcount==video_i_xsize-1) begin
//                    vxcount <= 'd0; 
//                    bt656_st <= SC_WAIT_FIFO;
//                end
//            end
//            SC_WAIT_FIFO:begin 
//                if(fifo_usedw<video_i_xsize-video_i_xsize/4) begin 
////                    if(vycount==VIDEO_IN_YSIZE/2) begin 
//                    if(vycount==VIDEO_IN_YSIZE/2) begin  
//                        vycount <= 'd0;
//                        bt656_st <= SC_IDLE;    
//                    end else begin 
//                        bt656_line_no <= bt656_line_no +2;
//                        bt656_st <= SC_REQ_H;
//                    end
//                end
//            end
//            default : bt656_st <= SC_IDLE;
//        endcase
//    end
//end


//always @(posedge clk27, posedge reset) begin: BT656_GEN_BT6565_GEN_FSM
//    reg [3-1:0] b;
//    if (reset == 1) begin
//        chroma <= 1;
//        bt656_sigh <= 0;
//        bt656_data <= 0;
//        bt656_cnt_lin <= 0;
//        fifo_rd <= 0;
//        state <= 3'b000;
//        bt656_cnt_pix <= ((280 / 2) - 1);
//        bt656_sigv <= 1;
//        PALnNTSC_l <= 1;
//        eav <= 1;
//        bt656_sigf <= 1;
//        VIDEO_IN_XSIZE <= 0;
//        VIDEO_IN_YSIZE <= 0;
//        BLANK_PIXELS <= 0;
//        BLANK_LINES <= 0;
//    end
//    else begin
//        b = {bt656_sigf, bt656_sigv, bt656_sigh};
//        if ((state == 3'b000)) begin
//            if (bt656_run) begin
//                state <= 3'b001;
//                VIDEO_IN_XSIZE <= video_i_xsize;
//                VIDEO_IN_YSIZE <= video_i_ysize;
//                PALnNTSC_l <= PAL_nNTSC;
//                if(PAL_nNTSC == 1'b1)begin
//                    BLANK_PIXELS <= (720 - video_i_xsize)/2;
//                    BLANK_LINES <= (576 - video_i_ysize)/4;
//                end
//                else begin
//                    BLANK_PIXELS <= (720 - video_i_xsize)/2;
//                    BLANK_LINES <= (486 - video_i_ysize)/4;                
//                end    
//            end
//        end
//        else begin
//            case (state)
//                3'b011: begin
//                    bt656_data <= 255;
//                    state <= 3'b100;
////                    PALnNTSC_l <= PAL_nNTSC;
//                end
//                3'b100: begin
//                    bt656_data <= 0;
//                    state <= 3'b101;
//                end
//                3'b101: begin
//                    bt656_data <= 0;
//                    state <= 3'b110;
//                end
//                3'b110: begin
//                    bt656_data[7] <= 1'b1;
//                    bt656_data[6] <= bt656_sigf;
//                    bt656_data[5] <= bt656_sigv;
//                    bt656_data[4] <= bt656_sigh;
//                    case (b)
//                        'h0: begin
//                            bt656_data[4-1:0] <= 0;
//                        end
//                        'h1: begin
//                            bt656_data[4-1:0] <= 13;
//                        end
//                        'h2: begin
//                            bt656_data[4-1:0] <= 11;
//                        end
//                        'h3: begin
//                            bt656_data[4-1:0] <= 6;
//                        end
//                        'h4: begin
//                            bt656_data[4-1:0] <= 7;
//                        end
//                        'h5: begin
//                            bt656_data[4-1:0] <= 10;
//                        end
//                        'h6: begin
//                            bt656_data[4-1:0] <= 12;
//                        end
//                        default: begin
//                            bt656_data[4-1:0] <= 1;
//                        end
//                    endcase
//                    if (eav) begin
//                        eav <= 0;
//                        bt656_sigh <= 0;
//                        state <= 3'b001;
//                        if (PALnNTSC_l) begin
//                            bt656_cnt_pix <= ((280 / 2) - 1);
//                        end
//                        else begin
//                            bt656_cnt_pix <= ((268 / 2) - 1);
//                        end
//                    end
//                    else begin
//                        eav <= 1;
//                        if (bt656_sigv) begin
//                            if (PALnNTSC_l) begin
//                                bt656_cnt_pix <= ((1440 / 2) - 1);
//                            end
//                            else begin
//                                bt656_cnt_pix <= ((1440 / 2) - 1);
//                            end
//                            state <= 3'b001;
//                        end
//                        else begin
//                            bt656_cnt_pix <= 0;
//                            state <= 3'b111;
//                            chroma <= 1'b1;
//                        end
//                    end
//                end
//                3'b001: begin
//                    bt656_data <= 128;
//                    state <= 3'b010;
//                end
//                3'b010: begin
//                    bt656_data <= 16;
//                    if ((bt656_cnt_pix == 0)) begin
//                        state <= 3'b011;
//                        if (eav) begin
//                            bt656_sigh <= 1;
//                            bt656_cnt_lin <= (bt656_cnt_lin + 1);
//                            if (PALnNTSC_l) begin
//                                if ((bt656_cnt_lin == 1)) begin
//                                    bt656_sigf <= (!bt656_sigf);
//                                end
//                                if (((($signed({1'b0, bt656_cnt_lin}) == (24 - 1)) && (bt656_sigf == 0)) || ((bt656_cnt_lin == 24) && (bt656_sigf == 1)))) begin
//                                    bt656_cnt_lin <= 0;
//                                    bt656_sigv <= 0;
//                                end
//                            end
//                            else begin
//                                if ((bt656_cnt_lin == 2)) begin
//                                    bt656_sigf <= (!bt656_sigf);
//                                end
//                                if (((($signed({1'b0, bt656_cnt_lin}) == (19 - 1)) && (bt656_sigf == 0)) || ((bt656_cnt_lin == 19) && (bt656_sigf == 1)))) begin
//                                    bt656_cnt_lin <= 0;
//                                    bt656_sigv <= 0;
//                                end
//                            end
//                        end
//                    end
//                    else begin
//                        bt656_cnt_pix <= (bt656_cnt_pix - 1);
//                        state <= 3'b001;
//                    end
//                end
//                3'b111: begin
//                    if (chroma) begin
//                        // fifo_rd <= 1'b0;
//                        if (((bt656_cnt_lin < BLANK_LINES) || (bt656_cnt_lin >= ((VIDEO_IN_YSIZE >>> 1) + BLANK_LINES)))) begin
//                            bt656_data <= 128;
//                        end
//                        else begin
//                            if (((bt656_cnt_pix < (BLANK_PIXELS << 1)) || (bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)))) begin
//                                bt656_data <= 128;
//                                if((bt656_cnt_pix >= (BLANK_PIXELS << 1)-2) && (bt656_cnt_pix < ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)) ) begin
//                                    fifo_rd <= 1'b1;
//                                end    
//                            end
//                            else begin 
//                                fifo_rd <= 1'b1;
//                                if(bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)-2) begin
//                                    fifo_rd <= 1'b0;
//                                end
//                                bt656_data <= fifo_out[7:0];
//                            end
//                        end
//                    end
//                    else begin
//                        fifo_rd <= 1'b0;
//                        if (((bt656_cnt_lin < BLANK_LINES) || (bt656_cnt_lin >= ((VIDEO_IN_YSIZE >>> 1) + BLANK_LINES)))) begin
//                            bt656_data <= 16;
//                        end
//                        else begin
//                            if (((bt656_cnt_pix < (BLANK_PIXELS << 1)) || (bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)))) begin
//                                bt656_data <= 16;
//                                // if((bt656_cnt_pix >= (BLANK_PIXELS << 1)-1) && (bt656_cnt_pix < ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1))) begin
//                                //     fifo_rd <= 1'b1;
//                                // end    
//                            end
//                            else begin
//                                // fifo_rd <= 1'b1;
//                                // if(bt656_cnt_pix >= ((VIDEO_IN_XSIZE + BLANK_PIXELS) << 1)-1) begin
//                                //     fifo_rd <= 1'b0;
//                                // end
//                                bt656_data <= fifo_out[15:8];
//                            end
//                        end
//                    end
//                    chroma <= (!chroma);
//                    bt656_cnt_pix <= (bt656_cnt_pix + 1);
//                    if (((($signed({1'b0, bt656_cnt_pix}) == (1440 - 1)) && (PALnNTSC_l == 1)) || (($signed({1'b0, bt656_cnt_pix}) == (1440 - 1)) && (PALnNTSC_l == 0)))) begin
//                        state <= 3'b011;
//                        fifo_rd <= 1'b0;
//                        bt656_cnt_lin <= (bt656_cnt_lin + 1);
//                        bt656_sigh <= 1;
//                        bt656_cnt_pix <= 0;
//                        if (((($signed({1'b0, bt656_cnt_lin}) == (288 - 1)) && (PALnNTSC_l == 1)) || (($signed({1'b0, bt656_cnt_lin}) == (243 - 1)) && (PALnNTSC_l == 0)))) begin
//                            VIDEO_IN_XSIZE <= video_i_xsize;
//                            VIDEO_IN_YSIZE <= video_i_ysize;
//                            if(PALnNTSC_l == 1'b1)begin
//                                BLANK_PIXELS <= (720 - video_i_xsize)/2;
//                                BLANK_LINES <= (576 - video_i_ysize)/4;
//                            end
//                            else begin
//                                BLANK_PIXELS <= (720 - video_i_xsize)/2;
//                                BLANK_LINES <= (486 - video_i_ysize)/4;                
//                            end 
//                            bt656_cnt_lin <= 0;
//                            bt656_sigv <= 1;
//                        end
//                    end
//                end
//            endcase
//        end
//    end
//end

//FIFO_DUAL_CLK #(
//    .FIFO_DEPTH(FIFO_DEPTH),
//    .FIFO_WIDTH(FIFO_WIDTH)
//    ) fifo_inst (
//    .CLK_WR(clk),         
//    .RST_WR(reset),         
//    .CLR_WR(fifo_clr),         
//    .WRREQ(fifo_wr),          
//    .WRDATA(fifo_in),         
//    .CLK_RD(clk27),         
//    .RST_RD(reset),         
//    .CLR_RD(fifo_clr_rd),         
//    .RDREQ(fifo_rd),          
//    .RDDATA(fifo_out),         
//    .EMPTY_RD(fifo_empty),       
//    .FIFO_CNT_RD(fifo_cnt)    
//    );
//META_HARDEN meta_harden_inst1(
//    .CLK_DST         (clk27),
//    .RST_DST         (reset),
//    .SIGNAL_SRC      (fifo_clr),
//    .SIGNAL_DST      (fifo_clr_rd)
//    );
//META_HARDEN_VECTOR #(.bit_width(FIFO_DEPTH)) meta_harden_inst2(
//    .CLK_DST         (clk),
//    .RST_DST         (reset),
//    .SIGNAL_SRC      (fifo_cnt),
//    .SIGNAL_DST      (fifo_usedw)
//    );

//assign fifo_wr = video_i_dav;
//assign fifo_in = video_i_data;
//// always @(posedge clk, posedge reset) begin: BT656_GEN_RUN_LOGIC
////     if (reset == 1) begin
////         fifo_in <= 0;
////         lcount <= 0;
////         fifo_wr <= 0;
////         vstate <= 1'b0;
////         run <= 0;
////         field <= 1;
////     end
////     else begin
////         if (video_i_v) begin
////             lcount <= 0;
////         end
////         if (video_i_h) begin
////             lcount <= (lcount + 1);
////         end
////         case (vstate)
////             1'b0: begin
////                 if (video_i_v) begin
////                     field <= (!field);
////                     vstate <= 1'b1;
////                 end
////             end
////             1'b1: begin
////                 if ((video_i_dav && (((!field) && lcount[0]) || (field && (!lcount[0]))))) begin
////                     fifo_wr <= 1'b1;
////                     fifo_in <= video_i_data;
////                 end
////                 else begin
////                     fifo_wr <= 1'b0;
////                 end
////                 if (((!run) && (lcount == (480 >>> 3)))) begin
////                     run <= (1 != 0);
////                 end
////                 if (video_i_eoi) begin
////                     vstate <= 1'b0;
////                 end
////             end
////         endcase
////     end
//// end



////wire [127 : 0] probe_bt656;

////assign probe_bt656 = { state,
////                            bt656_st,           
////                            video_i_v,          
////                            video_i_h,          
////                            video_i_dav,        
////                            video_i_data,       
////                            video_i_eoi,        
////                            video_i_xsize,      
////                            video_i_ysize,                         
////                            bt656_run,          
////                            bt656_req_v,        
////                            bt656_req_h,        
////                            bt656_field,        
////                            bt656_line_no,      
////                            bt656_req_xsize,    
////                            bt656_req_ysize,                                                                           
////                            clk27,              
////                            bt656_data ,
////                            vxcount,
////                            vycount,
////                            fifo_rd,
////                            fifo_clr,
////                            fifo_wr,
////                            fifo_empty,
////                            fifo_usedw,
////                            fifo_clr_rd,
////                            3'd0                                   
////                            }; 

////ila_0 i_ila_bt656
////(
////	.clk(clk),
////	.probe0(probe_bt656)
////);





//endmodule